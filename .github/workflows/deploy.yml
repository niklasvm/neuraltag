name: Deploy application to Google Cloud Platform

on:
  push:
    branches: [ "master" ]
  workflow_dispatch: {}

jobs:

  deploy:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4
    - uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}
    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
    - name: Terraform Init
      run: terraform -chdir=terraform init
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        GCP_REGION: ${{ secrets.GCP_REGION }}
    - name: Terraform Validate
      run: terraform -chdir=terraform validate
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        GCP_REGION: ${{ secrets.GCP_REGION }}
    
    - name: Login
      run: |
        gcloud auth configure-docker ${{secrets.GCP_REGION}}-docker.pkg.dev
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        GCP_REGION: ${{ secrets.GCP_REGION }}
    
    # deploy docker image
    - name: Build and push the Docker image
      run: |
        docker build -t ${{secrets.GCP_REGION}}-docker.pkg.dev/${{secrets.GCP_PROJECT_ID}}/strava/strava:${{github.sha}} .
        docker push ${{secrets.GCP_REGION}}-docker.pkg.dev/${{secrets.GCP_PROJECT_ID}}/strava/strava:${{github.sha}}
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        GCP_REGION: ${{ secrets.GCP_REGION }}
    
    - name: Terraform Plan
      run: |
        terraform -chdir=terraform plan \
          -var "gcp_project_id=$GCP_PROJECT_ID" \
          -var "gcp_sa_key=$GCP_SA_KEY" \
          -var "gcp_region=$GCP_REGION" \
          -var "image_tag=${{ github.sha }}"
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        GCP_REGION: ${{ secrets.GCP_REGION }}
    - name: Terraform Apply
      run: |
        terraform -chdir=terraform apply -auto-approve \
          -var "gcp_project_id=$GCP_PROJECT_ID" \
          -var "gcp_sa_key=$GCP_SA_KEY" \
          -var "gcp_region=$GCP_REGION" \
          -var "image_tag=${{ github.sha }}"
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        GCP_REGION: ${{ secrets.GCP_REGION }}

    - name: Delete all docker images except latest one
      run: |
        gcloud container images list-tags ${{secrets.GCP_REGION}}-docker.pkg.dev/${{secrets.GCP_PROJECT_ID}}/strava/strava \
          --filter='tags!=${{ github.sha }}' \
          --format='get(digest)' \
          | xargs -I {} gcloud container images delete ${{secrets.GCP_REGION}}-docker.pkg.dev/${{secrets.GCP_PROJECT_ID}}/strava/strava@{} --force-delete-tags
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        GCP_REGION: ${{ secrets.GCP_REGION }}
    - name: Delete old Google Cloud Run revisions
      run: |
        TO_DELETE=$(gcloud run revisions list --region=$GCP_REGION --service=strava \
          --filter="status.conditions.type:Active AND status.conditions.status:'False'" \
          --format='value(metadata.name)')
        if [ -n "$TO_DELETE" ]; then
            for REVISION in $TO_DELETE; do
                gcloud run revisions delete $REVISION --region=$GCP_REGION --quiet
            done
        fi
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        GCP_REGION: ${{ secrets.GCP_REGION }}